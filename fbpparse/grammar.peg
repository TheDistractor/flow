# adapted from https://github.com/noflo/fbp/blob/master/grammar/fbp.peg (MIT)

package fbpparse

type Fbp Peg {
}

start <- line* _ !.

line <-
	_ "EXPORT=" [A-Za-z.0-9_]+ ":" [A-Z0-9_]+ _ LineTerminator?
  / _ "INPORT=" [A-Za-z0-9_]+ "." [A-Z0-9_]+ ":" [A-Z0-9_]+ _ LineTerminator?
  / _ "OUTPORT=" [A-Za-z0-9_]+ "." [A-Z0-9_]+ ":" [A-Z0-9_]+ _ LineTerminator?
  / comment [\n\r]?
  / _ [\n\r]
  / _ connection _ LineTerminator?

LineTerminator <- _ ","? comment? [\n\r]?

comment <- _ "#" anychar*

connection <-
	bridge _ "->" _ connection
  / bridge

bridge <-
	port _ node _ port
  / iip
  / rightlet
  / leftlet

leftlet <- node _ port

iip <- "'" iipchar* "'"

rightlet <- port _ node

node <- [a-zA-Z0-9_]+ component?

component <- "(" [a-zA-Z/\-0-9_]* compMeta? ")"

compMeta <- ":" [a-zA-Z/]+

port <- [A-Z.0-9_]+ __

anychar <- [^\n\r]

iipchar <-
	[\\][']
  / [^']

_ <- [ \t]*

__ <- [ \t]+


# TODO: need to build up a parse tree, see peg's calculator example
# 
# line <-
# 	_ "EXPORT=" < [A-Za-z.0-9_]+ > { fmt.Println("PRIV:", buffer[begin:end]) }
# 	":" < [A-Z0-9_]+ > { fmt.Println("PUB:", buffer[begin:end]) }
# 	_ LineTerminator?
#   / _ "INPORT=" < [A-Za-z0-9_]+ > { fmt.Println("IN:", buffer[begin:end]) }
#     "." < [A-Z0-9_]+ > { fmt.Println("PORT:", buffer[begin:end]) }
# 	":" < [A-Z0-9_]+ > { fmt.Println("PUB:", buffer[begin:end]) }
# 	_ LineTerminator?
#   / _ "OUTPORT=" < [A-Za-z0-9_]+ > { fmt.Println("OUT", buffer[begin:end]) }
#     "." < [A-Z0-9_]+ > { fmt.Println("PORT:", buffer[begin:end]) }
# 	":" < [A-Z0-9_]+ > { fmt.Println("PUB:", buffer[begin:end]) }
# 	_ LineTerminator?
#   / comment [\n\r]?
#   / _ [\n\r]
#   / _ connection _ LineTerminator?
# 
# LineTerminator <- _ ","? comment? [\n\r]?
# 
# comment <- _ "#" anychar*
# 
# connection <-
# 	< bridge > { fmt.Println("X:", buffer[begin:end]) }
# 	_ "->" _ < connection >  { fmt.Println("Y:", buffer[begin:end]) }
#   / bridge
# 
# bridge <-
# 	< port >  { fmt.Println("TGT:", buffer[begin:end]) }
# 	_ node _ < port >  { fmt.Println("SRC:", buffer[begin:end]) }
#   / iip
#   / rightlet
#   / leftlet
# 
# leftlet <- node _ port
# 
# iip <- "'" < iipchar* > "'" { fmt.Println("I:", buffer[begin:end]) }
# 
# rightlet <- port _ node
# 
# node <- < [a-zA-Z0-9_]+ > { fmt.Println("N:", buffer[begin:end]) }
# 			 component?
# 
# component <- "(" < [a-zA-Z/\-0-9_]* > { fmt.Println("C:", buffer[begin:end]) }
# 				compMeta? ")"
# 
# compMeta <- ":" < [a-zA-Z/]+ > { fmt.Println("M:", buffer[begin:end]) }
# 
# port <- < [A-Z.0-9_]+ > __ { fmt.Println("P:", buffer[begin:end]) }
# 
# anychar <- [^\n\r]
# 
# iipchar <-
# 	[\\][']
#   / [^']
# 
# _ <- [ \t]*
# 
# __ <- [ \t]+
